buildscript{
    ext{
        mainPackage = "yourmod";

        arcHash = '128'
        mindustryVersion = 'v130.1'
        modCoreVersion = "32520b1c4be"
    }
    repositories{
        mavenLocal()
        mavenCentral()
//        google()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url 'https://jitpack.io' }
    }

    dependencies{
        classpath "com.github.Anuken:packr:-SNAPSHOT"
//        classpath "com.github.Anuken.Arc:packer:$mindustryVersion"
        classpath "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:core:$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:tools:$mindustryVersion"
        classpath "com.github.Anuken.Arc:packer:$arcHash"
        classpath 'commons-io:commons-io:2.5'
        classpath "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
//        classpath "com.github.Zelaux.GasLibrary:core:$gassesVersion"
    }
}
plugins{
    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
    id "org.jetbrains.kotlin.kapt" version "1.4.32"
    id 'groovy'
}
ext{
    //the build number that this mod is made for
    //version of SDK you will be using
    sdkVersion = '30'
    sdkRoot = System.getenv("ANDROID_HOME")

    doExec = { cmd ->
        def proc = cmd.execute(null, new File("$buildDir/libs"))
        proc.waitForProcessOutput(System.out, System.err)
    }
}

version '1.0'
allprojects{
    apply plugin: 'groovy'

    version = 'release'
    ext{
        arcModule = { String name ->
            //skip to last submodule
            if(name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Arc:$name:$arcHash"
        }
        coreModule = { String name ->
            //skip to last submodule
            if(name.contains(':')) name = name.split(':').last()
            return "com.github.Zelaux.ZelauxModCore:$name:$modCoreVersion"
        }
        writeProcessors = {
            new File(rootDir, "annotations/src/main/resources/META-INF/services/").mkdirs()
            def processorFile = new File(rootDir, "annotations/src/main/resources/META-INF/services/javax.annotation.processing.Processor")
            def text = new StringBuilder()
            def files = new File(rootDir, "annotations/src/main/java")
            files.eachFileRecurse(
                    groovy.io.FileType.FILES
            ){ file ->
                boolean isProcessor = file.text.contains(" extends ModBaseProcessor") ||
                        (file.text.contains(" extends AbstractProcessor") && !file.text.contains("abstract class")) ||
                        file.text.contains("@ModAnnotations.AnnotationProcessor");
                if(file.name.endsWith(".java") && isProcessor){
                    text.append(file.path.substring(files.path.length() + 1)).append("\n")
                }
            }

            processorFile.text = text.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
        }
    }
    apply plugin: 'maven-publish'
    repositories{
        mavenLocal()
        google()
        mavenCentral()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url "https://oss.sonatype.org/content/repositories/releases/" }
        maven{ url 'https://jitpack.io' }
    }
    tasks.withType(JavaCompile){
        targetCompatibility = 8
        sourceCompatibility = JavaVersion.VERSION_16
        options.encoding = "UTF-8"
        options.compilerArgs += ["-Xlint:deprecation"]

        options.forkOptions.jvmArgs.addAll([
                '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED'
        ])
    }
}

dependencies{
    implementation coreModule("core")
}
configure(project(":annotations")){
    tasks.withType(JavaCompile){
        targetCompatibility = 8
        sourceCompatibility = 8
        options.fork = true
    }
}

//compile with java 8 compatibility for everything except the annotation project
configure(subprojects - project(":annotations")){
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }

    tasks.withType(Javadoc){
        options{
            addStringOption('Xdoclint:none', '-quiet')
            addStringOption('-release', '16')
        }
    }
}

project(":core"){
    apply plugin: "java-library"
    apply plugin: "kotlin"
    apply plugin: "kotlin-kapt"

    kapt{
        javacOptions{
            option("-source", "16")
            option("-target", "1.8")
        }
    }

    compileJava.options.fork = true

    task preGen{
        outputs.upToDateWhen{ false }
//        generateLocales()
//        writeVersion()
        writeProcessors()
//        writePlugins()
    }
    task sourcesJar(type: Jar, dependsOn: classes){
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task assetsJar(type: Jar, dependsOn: ":tools:pack"){
        archiveClassifier = 'assets'
        from files("assets"){
            exclude "config", "cache", "music", "sounds"
        }
    }
    artifacts{
        archives sourcesJar
        archives assetsJar
    }
    dependencies{
        compileJava.dependsOn(preGen)

        implementation coreModule("core")

        compileOnly "org.lz4:lz4-java:1.7.1"
        compileOnly arcModule("arc-core")
        compileOnly arcModule("extensions:flabel")
        compileOnly arcModule("extensions:freetype")
        compileOnly arcModule("extensions:g3d")
        compileOnly arcModule("extensions:fx")
        compileOnly arcModule("extensions:arcnet")
        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"


        annotationProcessor 'com.github.Anuken:jabel:34e4c172e65b3928cd9eabe1993654ea79c409cd'

        compileOnly coreModule("annotations")
        compileOnly project(":annotations")
        kapt project(":annotations")

    }

    afterEvaluate{
        task mergedJavadoc(type: Javadoc){
            if(true) return null;
            def blacklist = [project(":annotations")]
            if(findProject(":android") != null){
                blacklist += project(":android")
            }

            source rootProject.subprojects.collect{ project ->
                if(!blacklist.contains(project) && project.hasProperty("sourceSets")){
                    return project.sourceSets.main.allJava
                }
            }

            classpath = files(rootProject.subprojects.collect{ project ->
                if(!blacklist.contains(project) && project.hasProperty("sourceSets")){
                    return project.sourceSets.main.compileClasspath
                }
            })
            destinationDir = new File(buildDir, 'javadoc')
        }
    }
    jar{
        exclude(mainPackage + "/entities/comp/**")
        exclude(mainPackage + "/entities/compByAnuke/**")
    }
}
project(":tools"){
    apply plugin: "java"
    dependencies{
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation 'commons-io:commons-io:2.5'

        implementation project(":core")

        implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
        implementation "com.github.Anuken.Mindustry:tools:$mindustryVersion"

        implementation coreModule("core")
        implementation coreModule("tools")

        implementation arcModule(":extensions:packer")
    }
}
project(":annotations"){
    apply plugin: "java-library"
    dependencies{
        implementation 'com.squareup:javapoet:1.12.1'
        implementation arcModule('arc-core')
        implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
        implementation "com.github.Anuken.Mindustry:tools:$mindustryVersion"


        implementation coreModule("core")
        implementation coreModule("tools")
        implementation coreModule("annotations")
    }
}
configure([":core"].collect{ project(it) }){
    java{
        withJavadocJar()
        withSourcesJar()
    }

    publishing{
        publications{
            maven(MavenPublication){
                from components.java
            }
        }
    }
}
task jarAndroid{
    dependsOn "jar"

    doLast{
        //collect dependencies needed for desugaring
        def files = (project(":core").configurations.compileClasspath.asList() + project(":core").configurations.runtimeClasspath.asList() + [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")])
        def dependencies = files.collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        doExec("d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar")
    }
}
jar{
    dependsOn "core:jar"
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    from{
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        project(":core").fileTree("build/libs/core.jar").collect{ it.isDirectory() ? it : zipTree(it) }
    }
    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
//        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
        include "mod.json"
        include "icon.png"
    }

    from("core/assets/"){
        include "**"
    }
}
task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{ delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
        delete{ delete "$buildDir/libs/${project.archivesBaseName}Android.jar" }
    }
}
task mjar() {
    dependsOn "jar"
    ext{
        move={String intoPath ->
            delete {
                delete "${intoPath}/${project.archivesBaseName}Desktop.jar"
            }
            copy {
                from "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
                into intoPath
            }
            println "moved into "+intoPath
        }
    }
    doLast {
        def modsDirectories = [] ;
        def file=new File(rootDir, "modsDirectories.txt");
//        println "abs->"+file.getAbsolutePath();
        if (file.exists()){
            BufferedReader reader=new BufferedReader(new FileReader(file));
            reader.lines().forEach(line->modsDirectories.add(line))
        }
        for (String directory:modsDirectories){
            if (directory.equals("classic")){
                directory="${arc.util.OS.getAppDataDirectoryString("Mindustry")}/mods/";
            }
            move(directory);
        }
        def time = LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"));
        System.out.println("\tlast build time: ${time}")
    }
}
